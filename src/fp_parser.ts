/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* TOP  := _ term=TERM _ $
* // terms
* // NOTE: The order in which these appear in the next line affects the order that it tries things when parsing
* TERM := MATCH | LET | IF | FUN | LET_NOANN | FUN_NOANN | EQUALS | INFIX_EXPRESSION | APP | SINGLES | PARENTERM | NOT
* PARENTERM := '\(' _ inside=TERM _ '\)'
* APPRHS := SINGLES | PARENTERM
* SINGLES := HOLE | NAME | INTEGER
* APP  := start_pos=@ applicant=TERM __ argument=APPRHS end_pos=@
* LET  := start_pos=@ 'let' __ data=NAME __ ':' __ signature=TYPE __ '=' __ implementation=TERM __ 'in' __ body=TERM end_pos=@
* LET_NOANN  := start_pos=@ 'let' __ data=NAME __ '=' __ implementation=TERM __ 'in' __ body=TERM end_pos=@
* FUN  := start_pos=@ 'fun' __ data=NAME __ ':' __ domain=TYPE __ '=>' __ body=TERM end_pos=@
* FUN_NOANN  := start_pos=@ 'fun' __ data=NAME __ '=>' __ body=TERM end_pos=@
* IF := start_pos=@ 'if' __ cond=TERM __ 'then' __ branch1=TERM __ 'else' __ branch2=TERM end_pos=@
* NAME := start_pos=@ !'in\s' !'fun\s' !'let\s' !'match\s' !'with\s' !'if\s' !'then\s' !'else\s' data='[a-zA-Z][a-zA-Z0-9]*' end_pos=@
* HOLE := start_pos=@ '\?' end_pos=@
* INTEGER := start_pos=@ data='[0-9]+' end_pos=@
* INFIX_EXPRESSION := start_pos=@ t1=TERM __ data=INFIX_OP __ t2=TERM end_pos=@
* INFIX_OP := '>=' | '<=' | '\+|\*|\-|\/|\%|\^|<|>|&&|\|\|'
* NOT := start_pos=@ '!' __ t=TERM end_pos=@
* EQUALS := start_pos=@ t1=TERM __ '==' __ t2=TERM end_pos=@
* MATCH := start_pos=@ 'match' __ l=TERM __ 'with' __ '\|' _ 'nil' _ '=>' _ nilcase=TERM _ '\|' _ 'cons' __ data=NAME __ data2=NAME _ '=>' _ t2=TERM end_pos=@
* // types
* TYPE := ARROW_TYPE | BOOL | INT | LIST | PARENTYPE
* PARENTYPE := '\(' _ inside=TYPE _ '\)'
* BASE_TYPE := BOOL | INT | LIST | PARENTYPE
* ARROW_TYPE := start_pos=@ domain=BASE_TYPE _ '->' _ codomain=TYPE end_pos=@
* BOOL := start_pos=@ 'Bool' end_pos=@
* INT := start_pos=@ 'Int' end_pos=@
* LIST := start_pos=@ 'List' __ domain=BASE_TYPE end_pos=@
* _ := '\s*'
* __ := '\s+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    TOP = "TOP",
    TERM_1 = "TERM_1",
    TERM_2 = "TERM_2",
    TERM_3 = "TERM_3",
    TERM_4 = "TERM_4",
    TERM_5 = "TERM_5",
    TERM_6 = "TERM_6",
    TERM_7 = "TERM_7",
    TERM_8 = "TERM_8",
    TERM_9 = "TERM_9",
    TERM_10 = "TERM_10",
    TERM_11 = "TERM_11",
    TERM_12 = "TERM_12",
    PARENTERM = "PARENTERM",
    APPRHS_1 = "APPRHS_1",
    APPRHS_2 = "APPRHS_2",
    SINGLES_1 = "SINGLES_1",
    SINGLES_2 = "SINGLES_2",
    SINGLES_3 = "SINGLES_3",
    APP = "APP",
    LET = "LET",
    LET_NOANN = "LET_NOANN",
    FUN = "FUN",
    FUN_NOANN = "FUN_NOANN",
    IF = "IF",
    NAME = "NAME",
    HOLE = "HOLE",
    INTEGER = "INTEGER",
    INFIX_EXPRESSION = "INFIX_EXPRESSION",
    INFIX_OP_1 = "INFIX_OP_1",
    INFIX_OP_2 = "INFIX_OP_2",
    INFIX_OP_3 = "INFIX_OP_3",
    NOT = "NOT",
    EQUALS = "EQUALS",
    MATCH = "MATCH",
    TYPE_1 = "TYPE_1",
    TYPE_2 = "TYPE_2",
    TYPE_3 = "TYPE_3",
    TYPE_4 = "TYPE_4",
    TYPE_5 = "TYPE_5",
    PARENTYPE = "PARENTYPE",
    BASE_TYPE_1 = "BASE_TYPE_1",
    BASE_TYPE_2 = "BASE_TYPE_2",
    BASE_TYPE_3 = "BASE_TYPE_3",
    BASE_TYPE_4 = "BASE_TYPE_4",
    ARROW_TYPE = "ARROW_TYPE",
    BOOL = "BOOL",
    INT = "INT",
    LIST = "LIST",
    _ = "_",
    __ = "__",
    $EOF = "$EOF",
}
export interface TOP {
    kind: ASTKinds.TOP;
    term: TERM;
}
export type TERM = TERM_1 | TERM_2 | TERM_3 | TERM_4 | TERM_5 | TERM_6 | TERM_7 | TERM_8 | TERM_9 | TERM_10 | TERM_11 | TERM_12;
export type TERM_1 = MATCH;
export type TERM_2 = LET;
export type TERM_3 = IF;
export type TERM_4 = FUN;
export type TERM_5 = LET_NOANN;
export type TERM_6 = FUN_NOANN;
export type TERM_7 = EQUALS;
export type TERM_8 = INFIX_EXPRESSION;
export type TERM_9 = APP;
export type TERM_10 = SINGLES;
export type TERM_11 = PARENTERM;
export type TERM_12 = NOT;
export interface PARENTERM {
    kind: ASTKinds.PARENTERM;
    inside: TERM;
}
export type APPRHS = APPRHS_1 | APPRHS_2;
export type APPRHS_1 = SINGLES;
export type APPRHS_2 = PARENTERM;
export type SINGLES = SINGLES_1 | SINGLES_2 | SINGLES_3;
export type SINGLES_1 = HOLE;
export type SINGLES_2 = NAME;
export type SINGLES_3 = INTEGER;
export interface APP {
    kind: ASTKinds.APP;
    start_pos: PosInfo;
    applicant: TERM;
    argument: APPRHS;
    end_pos: PosInfo;
}
export interface LET {
    kind: ASTKinds.LET;
    start_pos: PosInfo;
    data: NAME;
    signature: TYPE;
    implementation: TERM;
    body: TERM;
    end_pos: PosInfo;
}
export interface LET_NOANN {
    kind: ASTKinds.LET_NOANN;
    start_pos: PosInfo;
    data: NAME;
    implementation: TERM;
    body: TERM;
    end_pos: PosInfo;
}
export interface FUN {
    kind: ASTKinds.FUN;
    start_pos: PosInfo;
    data: NAME;
    domain: TYPE;
    body: TERM;
    end_pos: PosInfo;
}
export interface FUN_NOANN {
    kind: ASTKinds.FUN_NOANN;
    start_pos: PosInfo;
    data: NAME;
    body: TERM;
    end_pos: PosInfo;
}
export interface IF {
    kind: ASTKinds.IF;
    start_pos: PosInfo;
    cond: TERM;
    branch1: TERM;
    branch2: TERM;
    end_pos: PosInfo;
}
export interface NAME {
    kind: ASTKinds.NAME;
    start_pos: PosInfo;
    data: string;
    end_pos: PosInfo;
}
export interface HOLE {
    kind: ASTKinds.HOLE;
    start_pos: PosInfo;
    end_pos: PosInfo;
}
export interface INTEGER {
    kind: ASTKinds.INTEGER;
    start_pos: PosInfo;
    data: string;
    end_pos: PosInfo;
}
export interface INFIX_EXPRESSION {
    kind: ASTKinds.INFIX_EXPRESSION;
    start_pos: PosInfo;
    t1: TERM;
    data: INFIX_OP;
    t2: TERM;
    end_pos: PosInfo;
}
export type INFIX_OP = INFIX_OP_1 | INFIX_OP_2 | INFIX_OP_3;
export type INFIX_OP_1 = string;
export type INFIX_OP_2 = string;
export type INFIX_OP_3 = string;
export interface NOT {
    kind: ASTKinds.NOT;
    start_pos: PosInfo;
    t: TERM;
    end_pos: PosInfo;
}
export interface EQUALS {
    kind: ASTKinds.EQUALS;
    start_pos: PosInfo;
    t1: TERM;
    t2: TERM;
    end_pos: PosInfo;
}
export interface MATCH {
    kind: ASTKinds.MATCH;
    start_pos: PosInfo;
    l: TERM;
    nilcase: TERM;
    data: NAME;
    data2: NAME;
    t2: TERM;
    end_pos: PosInfo;
}
export type TYPE = TYPE_1 | TYPE_2 | TYPE_3 | TYPE_4 | TYPE_5;
export type TYPE_1 = ARROW_TYPE;
export type TYPE_2 = BOOL;
export type TYPE_3 = INT;
export type TYPE_4 = LIST;
export type TYPE_5 = PARENTYPE;
export interface PARENTYPE {
    kind: ASTKinds.PARENTYPE;
    inside: TYPE;
}
export type BASE_TYPE = BASE_TYPE_1 | BASE_TYPE_2 | BASE_TYPE_3 | BASE_TYPE_4;
export type BASE_TYPE_1 = BOOL;
export type BASE_TYPE_2 = INT;
export type BASE_TYPE_3 = LIST;
export type BASE_TYPE_4 = PARENTYPE;
export interface ARROW_TYPE {
    kind: ASTKinds.ARROW_TYPE;
    start_pos: PosInfo;
    domain: BASE_TYPE;
    codomain: TYPE;
    end_pos: PosInfo;
}
export interface BOOL {
    kind: ASTKinds.BOOL;
    start_pos: PosInfo;
    end_pos: PosInfo;
}
export interface INT {
    kind: ASTKinds.INT;
    start_pos: PosInfo;
    end_pos: PosInfo;
}
export interface LIST {
    kind: ASTKinds.LIST;
    start_pos: PosInfo;
    domain: BASE_TYPE;
    end_pos: PosInfo;
}
export type _ = string;
export type __ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$TERM$memo.clear();
    }
    protected $scope$TERM$memo: Map<number, [Nullable<TERM>, PosInfo]> = new Map();
    public matchTOP($$dpth: number, $$cr?: ErrorTracker): Nullable<TOP> {
        return this.run<TOP>($$dpth,
            () => {
                let $scope$term: Nullable<TERM>;
                let $$res: Nullable<TOP> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$term = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TOP, term: $scope$term};
                }
                return $$res;
            });
    }
    public matchTERM($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM> {
        const fn = () => {
            return this.choice<TERM>([
                () => this.matchTERM_1($$dpth + 1, $$cr),
                () => this.matchTERM_2($$dpth + 1, $$cr),
                () => this.matchTERM_3($$dpth + 1, $$cr),
                () => this.matchTERM_4($$dpth + 1, $$cr),
                () => this.matchTERM_5($$dpth + 1, $$cr),
                () => this.matchTERM_6($$dpth + 1, $$cr),
                () => this.matchTERM_7($$dpth + 1, $$cr),
                () => this.matchTERM_8($$dpth + 1, $$cr),
                () => this.matchTERM_9($$dpth + 1, $$cr),
                () => this.matchTERM_10($$dpth + 1, $$cr),
                () => this.matchTERM_11($$dpth + 1, $$cr),
                () => this.matchTERM_12($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$TERM$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$TERM$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<TERM> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$TERM$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchTERM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_1> {
        return this.matchMATCH($$dpth + 1, $$cr);
    }
    public matchTERM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_2> {
        return this.matchLET($$dpth + 1, $$cr);
    }
    public matchTERM_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_3> {
        return this.matchIF($$dpth + 1, $$cr);
    }
    public matchTERM_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_4> {
        return this.matchFUN($$dpth + 1, $$cr);
    }
    public matchTERM_5($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_5> {
        return this.matchLET_NOANN($$dpth + 1, $$cr);
    }
    public matchTERM_6($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_6> {
        return this.matchFUN_NOANN($$dpth + 1, $$cr);
    }
    public matchTERM_7($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_7> {
        return this.matchEQUALS($$dpth + 1, $$cr);
    }
    public matchTERM_8($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_8> {
        return this.matchINFIX_EXPRESSION($$dpth + 1, $$cr);
    }
    public matchTERM_9($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_9> {
        return this.matchAPP($$dpth + 1, $$cr);
    }
    public matchTERM_10($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_10> {
        return this.matchSINGLES($$dpth + 1, $$cr);
    }
    public matchTERM_11($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_11> {
        return this.matchPARENTERM($$dpth + 1, $$cr);
    }
    public matchTERM_12($$dpth: number, $$cr?: ErrorTracker): Nullable<TERM_12> {
        return this.matchNOT($$dpth + 1, $$cr);
    }
    public matchPARENTERM($$dpth: number, $$cr?: ErrorTracker): Nullable<PARENTERM> {
        return this.run<PARENTERM>($$dpth,
            () => {
                let $scope$inside: Nullable<TERM>;
                let $$res: Nullable<PARENTERM> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$inside = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PARENTERM, inside: $scope$inside};
                }
                return $$res;
            });
    }
    public matchAPPRHS($$dpth: number, $$cr?: ErrorTracker): Nullable<APPRHS> {
        return this.choice<APPRHS>([
            () => this.matchAPPRHS_1($$dpth + 1, $$cr),
            () => this.matchAPPRHS_2($$dpth + 1, $$cr),
        ]);
    }
    public matchAPPRHS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<APPRHS_1> {
        return this.matchSINGLES($$dpth + 1, $$cr);
    }
    public matchAPPRHS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<APPRHS_2> {
        return this.matchPARENTERM($$dpth + 1, $$cr);
    }
    public matchSINGLES($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLES> {
        return this.choice<SINGLES>([
            () => this.matchSINGLES_1($$dpth + 1, $$cr),
            () => this.matchSINGLES_2($$dpth + 1, $$cr),
            () => this.matchSINGLES_3($$dpth + 1, $$cr),
        ]);
    }
    public matchSINGLES_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLES_1> {
        return this.matchHOLE($$dpth + 1, $$cr);
    }
    public matchSINGLES_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLES_2> {
        return this.matchNAME($$dpth + 1, $$cr);
    }
    public matchSINGLES_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLES_3> {
        return this.matchINTEGER($$dpth + 1, $$cr);
    }
    public matchAPP($$dpth: number, $$cr?: ErrorTracker): Nullable<APP> {
        return this.run<APP>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$applicant: Nullable<TERM>;
                let $scope$argument: Nullable<APPRHS>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<APP> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && ($scope$applicant = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$argument = this.matchAPPRHS($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.APP, start_pos: $scope$start_pos, applicant: $scope$applicant, argument: $scope$argument, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchLET($$dpth: number, $$cr?: ErrorTracker): Nullable<LET> {
        return this.run<LET>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<NAME>;
                let $scope$signature: Nullable<TYPE>;
                let $scope$implementation: Nullable<TERM>;
                let $scope$body: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<LET> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:let)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$signature = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$implementation = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:in)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.LET, start_pos: $scope$start_pos, data: $scope$data, signature: $scope$signature, implementation: $scope$implementation, body: $scope$body, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchLET_NOANN($$dpth: number, $$cr?: ErrorTracker): Nullable<LET_NOANN> {
        return this.run<LET_NOANN>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<NAME>;
                let $scope$implementation: Nullable<TERM>;
                let $scope$body: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<LET_NOANN> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:let)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$implementation = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:in)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.LET_NOANN, start_pos: $scope$start_pos, data: $scope$data, implementation: $scope$implementation, body: $scope$body, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchFUN($$dpth: number, $$cr?: ErrorTracker): Nullable<FUN> {
        return this.run<FUN>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<NAME>;
                let $scope$domain: Nullable<TYPE>;
                let $scope$body: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<FUN> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:fun)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$domain = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.FUN, start_pos: $scope$start_pos, data: $scope$data, domain: $scope$domain, body: $scope$body, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchFUN_NOANN($$dpth: number, $$cr?: ErrorTracker): Nullable<FUN_NOANN> {
        return this.run<FUN_NOANN>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<NAME>;
                let $scope$body: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<FUN_NOANN> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:fun)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.FUN_NOANN, start_pos: $scope$start_pos, data: $scope$data, body: $scope$body, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchIF($$dpth: number, $$cr?: ErrorTracker): Nullable<IF> {
        return this.run<IF>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$cond: Nullable<TERM>;
                let $scope$branch1: Nullable<TERM>;
                let $scope$branch2: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<IF> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:if)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$cond = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:then)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$branch1 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:else)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$branch2 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.IF, start_pos: $scope$start_pos, cond: $scope$cond, branch1: $scope$branch1, branch2: $scope$branch2, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchNAME($$dpth: number, $$cr?: ErrorTracker): Nullable<NAME> {
        return this.run<NAME>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<string>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<NAME> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:in\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:fun\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:let\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:match\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:with\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:if\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:then\s)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:else\s)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$data = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9]*)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.NAME, start_pos: $scope$start_pos, data: $scope$data, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchHOLE($$dpth: number, $$cr?: ErrorTracker): Nullable<HOLE> {
        return this.run<HOLE>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<HOLE> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\?)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.HOLE, start_pos: $scope$start_pos, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchINTEGER($$dpth: number, $$cr?: ErrorTracker): Nullable<INTEGER> {
        return this.run<INTEGER>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$data: Nullable<string>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<INTEGER> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && ($scope$data = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.INTEGER, start_pos: $scope$start_pos, data: $scope$data, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchINFIX_EXPRESSION($$dpth: number, $$cr?: ErrorTracker): Nullable<INFIX_EXPRESSION> {
        return this.run<INFIX_EXPRESSION>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$t1: Nullable<TERM>;
                let $scope$data: Nullable<INFIX_OP>;
                let $scope$t2: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<INFIX_EXPRESSION> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && ($scope$t1 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchINFIX_OP($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$t2 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.INFIX_EXPRESSION, start_pos: $scope$start_pos, t1: $scope$t1, data: $scope$data, t2: $scope$t2, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchINFIX_OP($$dpth: number, $$cr?: ErrorTracker): Nullable<INFIX_OP> {
        return this.choice<INFIX_OP>([
            () => this.matchINFIX_OP_1($$dpth + 1, $$cr),
            () => this.matchINFIX_OP_2($$dpth + 1, $$cr),
            () => this.matchINFIX_OP_3($$dpth + 1, $$cr),
        ]);
    }
    public matchINFIX_OP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<INFIX_OP_1> {
        return this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr);
    }
    public matchINFIX_OP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<INFIX_OP_2> {
        return this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr);
    }
    public matchINFIX_OP_3($$dpth: number, $$cr?: ErrorTracker): Nullable<INFIX_OP_3> {
        return this.regexAccept(String.raw`(?:\+|\*|\-|\/|\%|\^|<|>|&&|\|\|)`, "", $$dpth + 1, $$cr);
    }
    public matchNOT($$dpth: number, $$cr?: ErrorTracker): Nullable<NOT> {
        return this.run<NOT>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$t: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<NOT> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:!)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$t = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.NOT, start_pos: $scope$start_pos, t: $scope$t, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchEQUALS($$dpth: number, $$cr?: ErrorTracker): Nullable<EQUALS> {
        return this.run<EQUALS>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$t1: Nullable<TERM>;
                let $scope$t2: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<EQUALS> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && ($scope$t1 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:==)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$t2 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.EQUALS, start_pos: $scope$start_pos, t1: $scope$t1, t2: $scope$t2, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchMATCH($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCH> {
        return this.run<MATCH>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$l: Nullable<TERM>;
                let $scope$nilcase: Nullable<TERM>;
                let $scope$data: Nullable<NAME>;
                let $scope$data2: Nullable<NAME>;
                let $scope$t2: Nullable<TERM>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<MATCH> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:match)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$l = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:with)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\|)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:nil)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$nilcase = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\|)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:cons)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$data2 = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$t2 = this.matchTERM($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.MATCH, start_pos: $scope$start_pos, l: $scope$l, nilcase: $scope$nilcase, data: $scope$data, data2: $scope$data2, t2: $scope$t2, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchTYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE> {
        return this.choice<TYPE>([
            () => this.matchTYPE_1($$dpth + 1, $$cr),
            () => this.matchTYPE_2($$dpth + 1, $$cr),
            () => this.matchTYPE_3($$dpth + 1, $$cr),
            () => this.matchTYPE_4($$dpth + 1, $$cr),
            () => this.matchTYPE_5($$dpth + 1, $$cr),
        ]);
    }
    public matchTYPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE_1> {
        return this.matchARROW_TYPE($$dpth + 1, $$cr);
    }
    public matchTYPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE_2> {
        return this.matchBOOL($$dpth + 1, $$cr);
    }
    public matchTYPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE_3> {
        return this.matchINT($$dpth + 1, $$cr);
    }
    public matchTYPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE_4> {
        return this.matchLIST($$dpth + 1, $$cr);
    }
    public matchTYPE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<TYPE_5> {
        return this.matchPARENTYPE($$dpth + 1, $$cr);
    }
    public matchPARENTYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<PARENTYPE> {
        return this.run<PARENTYPE>($$dpth,
            () => {
                let $scope$inside: Nullable<TYPE>;
                let $$res: Nullable<PARENTYPE> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$inside = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PARENTYPE, inside: $scope$inside};
                }
                return $$res;
            });
    }
    public matchBASE_TYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<BASE_TYPE> {
        return this.choice<BASE_TYPE>([
            () => this.matchBASE_TYPE_1($$dpth + 1, $$cr),
            () => this.matchBASE_TYPE_2($$dpth + 1, $$cr),
            () => this.matchBASE_TYPE_3($$dpth + 1, $$cr),
            () => this.matchBASE_TYPE_4($$dpth + 1, $$cr),
        ]);
    }
    public matchBASE_TYPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BASE_TYPE_1> {
        return this.matchBOOL($$dpth + 1, $$cr);
    }
    public matchBASE_TYPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BASE_TYPE_2> {
        return this.matchINT($$dpth + 1, $$cr);
    }
    public matchBASE_TYPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<BASE_TYPE_3> {
        return this.matchLIST($$dpth + 1, $$cr);
    }
    public matchBASE_TYPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<BASE_TYPE_4> {
        return this.matchPARENTYPE($$dpth + 1, $$cr);
    }
    public matchARROW_TYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<ARROW_TYPE> {
        return this.run<ARROW_TYPE>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$domain: Nullable<BASE_TYPE>;
                let $scope$codomain: Nullable<TYPE>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<ARROW_TYPE> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && ($scope$domain = this.matchBASE_TYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$codomain = this.matchTYPE($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ARROW_TYPE, start_pos: $scope$start_pos, domain: $scope$domain, codomain: $scope$codomain, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchBOOL($$dpth: number, $$cr?: ErrorTracker): Nullable<BOOL> {
        return this.run<BOOL>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<BOOL> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:Bool)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.BOOL, start_pos: $scope$start_pos, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.run<INT>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<INT> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:Int)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.INT, start_pos: $scope$start_pos, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public matchLIST($$dpth: number, $$cr?: ErrorTracker): Nullable<LIST> {
        return this.run<LIST>($$dpth,
            () => {
                let $scope$start_pos: Nullable<PosInfo>;
                let $scope$domain: Nullable<BASE_TYPE>;
                let $scope$end_pos: Nullable<PosInfo>;
                let $$res: Nullable<LIST> = null;
                if (true
                    && ($scope$start_pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:List)`, "", $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                    && ($scope$domain = this.matchBASE_TYPE($$dpth + 1, $$cr)) !== null
                    && ($scope$end_pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.LIST, start_pos: $scope$start_pos, domain: $scope$domain, end_pos: $scope$end_pos};
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public match__($$dpth: number, $$cr?: ErrorTracker): Nullable<__> {
        return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchTOP(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchTOP(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchTOP(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<TOP>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}